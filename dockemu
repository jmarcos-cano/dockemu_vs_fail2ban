#!/bin/bash
#NAME: naet.sh
#AUTHOR: Marcos Cano  2015
#CONTACT INFO: jmarcos.cano@gmail.com , marcos.cano@galileo.edu
#VERSION: 1.0 
#DESCRIPTION: 






containers=0
docker_image="to_dockemu:simple"


docker_simple="docker run --privileged -i -t -d --net=none --name docker-$id $docker_image "
#echo $docker_simple
docker_complex="docker run -v $(pwd)/logs:/var/log  --privileged -d  --net=none --name docker-$id $docker_image "

## deberian ser leidas del conf file
#GENERAL
waf_path=/home/emulation/repos/ns-3-allinone/ns-3-dev/
verbose=false
logfile="logs/naet.log"
persistence=true
container_log_path=log/


config_files_path="conf/"
template_file="ns3/tap-wifi"
container_expr="container"
network="10.0.0.0"
netmask="/8"


### OLSRD DEFAULTS
olsr_containers=2
olsr_network=10.0.0.0
olsr_etmask=255.0.0.0


###BMX6
bmx6_containers=2
bmx6_network=10.0.0.0
bmx6_netmask=255.0.0.0




if $verbose;then 
	set -x
fi
# if [[ $USER != "root" ]]; then 
# 		echo "This script must be run as root!" 
# 		exit 1
# fi 


#tools()
#docker logs docker-$id




echo  "##############################################"
echo  "##############################################"
echo  "______ _____ _____  _   __ ________  ____   _ "
echo  "|  _  \  _  /  __ \| | / /|  ___|  \/  | | | |"
echo  "| | | | | | | /  \/| |/ / | |__ | .  . | | | |"
echo  "| | | | | | | |    |    \ |  __|| |\/| | | | |"
echo  "| |/ /\ \_/ / \__/\| |\  \| |___| |  | | |_| |"
echo  "|___/  \___/ \____/\_| \_/\____/\_|  |_/\___/ "
echo  ""
echo  "##############################################"
echo  "#########  WELCOME TO DOCKEMU V.1.0  #########"
echo  "##############################################"
echo  ""
echo  ""






#######################
# usage()
# script usage
#######################
usage(){

	cat <<-EOU
	usage :   $0  [OPTIONS]  

	OPTIONS:
	    start|--start|-start|-s|--s    <config file>               starts DOCKEMU with a config file  :)

        attach 	container-ID							           attach to a given container
        
        list                                                       list running containers

	    destroy|--destroy|-destroy|-d|--d  <all| containerID>      destroys a containerID or all

	    -print                                                     prints the current configuration

	    -help,-h,--help                                            prints this message
	

	NOTE: if no configuration file is provided  while start it will use the default one

	EOU
}



#######################
#attach()
#description:
# attach to a running container
#######################
attach(){
	id=$1
	docker exec -it $id /bin/bash
}

list(){
	echo "AVAILABLE DOCKEMUS"
	docker ps |grep dockemu|awk '{print $(NF)}'
}

#######################
# log()
# description:
# a bash utility to log msgs to $logfile
# $1 = message to log
#######################
log(){
	message=$1
	date=$(echo [ $(date +%D-%T) ])
	#echo "logging utility"
	if $logging;then
		echo $date $message | tee -a $logfile
	else
		echo $date $message
	fi
}


#######################
# destroy()
# description:
# function to destroy a single container
# or destroy all
#######################
destroy(){

	id=$1
	#destroy containers
	#lxc-destroy -n container-${id}
	###bridge down
		#docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)
	

	if [ "$id" = "all" ];then
		while read line
		do
		    name=$line
		    echo "Text read from file - $name"
		    destroy $name
		done < logs/running.log
	else
		ifconfig "br-${id}" down #2>/dev/null
		###rm taps from bridges
		brctl delif "br-${id}" "tap-${id}" #2>/dev/null
		###destroy the bridges
		brctl delbr "br-${id}"  #2>/dev/null
		###taps down
		ifconfig "tap-${id}" down  #2>/dev/null
		###delete taps
		tunctl -d "tap-${id}" # 2>/dev/null
		##delete iplink
		ip link del "${id}-A" # 2>/dev/null
		ip link del "${id}-B"  #2>/dev/null

		docker stop  dockemu-$id #2>/dev/null
		docker kill dockemu-$id #2>/dev/null
		docker rm dockemu-$id  #2>/dev/null
	fi
	
}


#######################
# create()
# description:
# ID = $1 
# note: the number or name of the container and 
# all interfaces linked to it, 
# TYPE = $2
# should contain the type of the container
# i.e: olsrd ,  bmx6
# note: bmx6 or olrsd
#######################

count=1
create(){	
		#read -p ""
		# type=$2
		# if [ ! -z "$type" ];then	
		# 	id=$type-$1
		# else
		# 	id=$1
		# fi

		id=$1
		echo $id >> logs/running.log
		#type=$(echo $id |tr "-" " "|awk '{print $1}')
		
		### SET VARIABLES
		bridge="br-${id}"
		tap="tap-${id}"
		sideA="$id-A"
		sideB="$id-B"
		
		#echo $bridge $tap $sideB $sideA
		
		#make sure everything is destroyed before creating it.
		destroy $id &>/dev/null
		### CREATE OUTER BRIDGES
		brctl addbr $bridge \
		&& tunctl -t $tap \
		&& ifconfig $tap 0.0.0.0 promisc up \
		&& brctl addif $bridge $tap \
		&& ifconfig $bridge up  &>/dev/null

		#echo "outer bridge $bridge created"
		log "BRIDGES: br: $bridge tap: $tap CREATED"

		#EL ID DEBERIA TENER TAMBIEN EL TIPO!!!
		### RUN IT
		#try
		{
			if  $persistence ;then
				
				if [ ! -e $(pwd)/logs/$id/ ];then
					mkdir $(pwd)/logs/$id/
				fi 
				contain=$(docker run -v  $(pwd)/logs/$id/:/var/log/supervisor/ --privileged  -d --net=none --name dockemu-$id $docker_image )
			else
				contain=$(docker run --privileged  -d --net=none --name dockemu-$id $docker_image )
			fi

		#docker run --privileged -i -t -d --net=none --name docker-$id $docker_image -t $type -i $id #&& #2>/dev/null
		#docker run -v $(pwd)/logs:/var/log  --entrypoint /bin/bash --privileged -d  --net=none --name docker-$id $docker_image  -c "/bin/bash"
		#echo "DOCKER: docker-$id CREATED"
			log "DOCKER: docker-$id  ID: $id TYPE: $type CREATED"
		}|| # catch
		{
			echo "DOCKER issues creating docker-$id"
			#exit 0
		}
		
		## CREATE INNER BRIDGE
		pid=$(docker inspect -f '{{.State.Pid}}' dockemu-${id} )
		mkdir -p /var/run/netns 
		ln -s /proc/$pid/ns/net /var/run/netns/$pid

		ip link add $sideA type veth peer name $sideB
		brctl addif $bridge $sideA
		ip link set $sideB netns $pid
		ip netns exec $pid ip link set dev $sideB name eth0
		ip netns exec $pid ip link set eth0 up
		ip netns exec $pid ip addr add 10.0.0.$count/16 dev eth0   #network???
		ip link set $sideA up

		#log the name of the container and all interfaces attached to it

		## if everything went ok count++
		log "NETWORK inside DOCKER: dockemu-$id IP:10.0.0.$count/8    CREATED & ATTACHED TO BRIDGES"
		count=$((count +1 ))
		log ""

}


#######################
#template()
#description:
# templates the CC file
#######################
template(){
	id=$1
	conteo=$2
	#echo "TEMPLATING" $id

	text="tapBridge.SetAttribute (\"DeviceName\", StringValue (\"tap-${id}\")); \n
  	tapBridge.Install (nodes.Get ($conteo), devices.Get ($conteo));"
  	echo $text
	sed -i "/running containers/a $(echo $text)" $template_file.cc
}



#######################
#config_reader()
#description:
# reads the config file
#######################
config_reader(){
	echo "##### CONFIG READER: ##### "
	conf_file=$1
	source $conf_file

	lista=$(cat $conf_file|grep -v "#" )
	for i in $lista;do
		echo $i
	done

}


### 
##
###
start_waf(){
	echo "RUNNING SIMULATION press CTRL-C to stop it"
	mv $template_file.cc $waf_path/scratch/tap-csma-virtual-machine-cpy.cc

	current=$(pwd)
	cd $waf_path
	./waf build
	./waf --run tap-csma-virtual-machine-cpy

	cd $current
}

start(){
	
	type=$1
	type_count=$2
	### while OLSRD containers
	echo 
	echo "#####  $type START  ##### "

### CREATE
	j="0"
	list=""
	while [ $j -lt $type_count ]
	do
		echo "STARTING: $type-$j"
		list=$list" $type-$j "
		idi=${type}-$j
		create $idi
		j=$[$j+1]	
	done


### TEMAPLATE
	cp $template_file $template_file.cc
	sed -i "s=nodes.Create(2);=nodes.Create($olsr_containers);=" $template_file.cc
	#new thing
	sed -i "s=Simulator::Stop (Seconds (600.));=Simulator::Stop (Seconds ($runningTime.));="  $template_file.cc

	j="0"
	while [ $j -lt $type_count ]
	do
		echo "TEMPLATING: $type-$j"
		id=${type}-$j
		template $id $j
		j=$[$j+1]
	done

	

	start_waf

	echo "WAITING: $runningTime"
	sleep $runningTime

	# for i in $list;do
	# 	destroy $i &>/dev/null
	# done

	 echo "KILLING "

	j="0"
	while [ $j -lt $type_count ]
	do
		echo "KILLING: $type-$j"
		id=${type}-$j
		destroy $id
		j=$[$j+1]
	done

	#kill all
	#docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)
}

conf_file=conf/dockemu.conf

if [ $# -gt 0 ] ;then
	
	args=$@
	case $1 in
		start|--start|-start|-s|--s)
			#echo "start"
			rm logs/running.log

			if [ ! -z $2 ];then
				conf_file=$2
				if [ -f $conf_file ];then
					#echo "conf: $conf_file found"
					#step 1:
					#echo "lets read it"
					config_reader $conf_file
					#step 2:
					start olsrd $olsr_containers


				else
					echo "conf file: '$conf_file' NOT FOUND"
					exit 0
				fi	
			else
				echo [ERROR] config file not provided
				usage
			fi
		;;
		destroy|--destroy|-destroy|-d|--d)
			#echo destroy
			if [ ! -z $2 ];then
				echo "destroy"
				destroy $2

			else
				echo "[ERROR] destroy all or a specific ID?"
				exit 0
			fi
		;;	
		attach)

			if [ ! -z $2 ];then
				attach $2
			else
				echo "wrong attach"
				usage
			fi
		;;
		list|ls)

			list
		;;
		help|--help|-h|--h|-help)
				usage
				;;
		print)
			echo " print the current config"
			;;
		*)
		usage
		;;
	esac
else
	usage
fi


